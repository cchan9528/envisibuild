opencv and opencv2 is in /usr/local/include/

http://colorizer.org/
interesting graphic about hsv

1. Determine appropriate colors for legos
http://opencv-srf.blogspot.com/2010/09/object-detection-using-color-seperation.html

build command
g++ -g -Wall -I/usr/local/include/ -L/usr/local/lib -lopencv_calib3d -lopencv_contrib -lopencv_core -lopencv_features2d -lopencv_flann -lopencv_gpu -lopencv_highgui -lopencv_imgproc -lopencv_legacy -lopencv_ml -lopencv_nonfree -lopencv_objdetect -lopencv_ocl -lopencv_photo -lopencv_stitching -lopencv_superres -lopencv_ts -lopencv_video -lopencv_videostab -o HSVFinder HSVFinder.cpp

Define macros found manually

Highly dependent on exposure

2. Cumulative mask

same build command even though moved macros to header file

used interpolation to resize!

bitwise or mask b/c it's more intuitive
    i think the overflow of an unsigned char makes it so adding two of them is the same

Still RUDIMENTARY
    Thresholding is very basic
    As we can see, we pick up a lot of noise/things we don't want as "LEGOS" w/ thresholding alone
    ML could help us/is how you get better results

LPF to filter out noise (APPLY AFTER THRESHOLDING)

3. Contours

had to convert the mask to bgr format to display Color

also be careful of the order

- find Contours from a clone of the image b/c findContours() modifies it
- draw them on the Original
- display the original

http://docs.opencv.org/trunk/dd/d49/tutorial_py_contour_features.html

Also be aware that you should draw the bounding box before you add it to total
Do this for each mask so you don't combine two from different colors accidentally

4. Centroids

5. Labels

6. Sequencing
